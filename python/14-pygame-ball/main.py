# Напишем простое графическое приложение которое будет предтавлять из себя
# мяч перемещающийся по экрану и отражающийся от границ окна приложения

# для этого познакомимся с понятием анимации и мультипликации

# Мультиплика́ция (от лат. multiplicatio «умножение, увеличение, возрастание, размножение» ← multi «много»[1]) —
# технические приёмы создания иллюзии движущихся изображений (движения и/или изменения формы объектов — морфинга)
# с помощью последовательности неподвижных изображений (кадров), сменяющих друг друга с некоторой частотой.

# В разных регионах мира по традиции мультипликация называется по-разному.
# Анима́ция (от лат. animatio «оживление; одушевление» ← anima «душа») — синтетическое аудиовизуальное искусство,
# в основе которого лежит иллюзия оживления созданных художником объёмных и плоских изображений или объектов
# предметно-реального мира, запечатлённых покадрово на кино- и видеоплёнке или на цифровых носителях[1]; западное название мультипликации.

# суть определений в том что движение можно визуализировать как последовательность изображений
# очень похожих и в то же время немного отличающихся друг от друга
# выстраивая эти изображения в опеределенном порядке и смотря последовательно на каждое в отдельности с определенной скоростью
# мы увидим иллюзию движения

# Благо большую чыасть за нас будет делать компьютер так как
# рисование очень похожих друг на друга изображений может стать очень утомительной задачей ))

#
# Для этого нам понадобится две библиотеки
# Системная библиотека из которй нам понадобится функция выполняющая завершение программы
import sys

# Простая библиотека предоставляющая полезные функции
# которые помогают манитулировать изображениями и событиями
import pygame

# Инициализируем библиотеку pygame это устанавливает некоторые полезные внутренние переменные
pygame.init()


# координаты в окне приложения принято откладывать от верхнего левого угда окна как и строки и столбцы
# (x,y)
# (0,0)     (1,0)  X
#      +------+---->
#      |      |
#      |      |
# (0,1)+------+ (1,1)
#      |
#    Y v

# определим размеры окна нашего приложения
# тоесть буквально определим размеры нашего холста
size = width, height = 768, 1024

# определим скорость нашего обьекта тоесть мяча по оси X и Y
speed = [1, 1]

# определим цвет черный цыет по шкале R, G, B  подробнее в статье (https://ru.wikipedia.org/wiki/RGB)
black = 0, 0, 0

# Установим размеры окна нашего приложения
screen = pygame.display.set_mode(size)

# Загрузим изображение нашего мяча поместив объект в переменную ball
ball = pygame.image.load("intro_ball.gif")

# определим размеры изображения получив прямоугольник в который можно его вписать
# далее будим оперировать именно этим прямоугольником
# обьекты Rect(прямоугольник) используются для хранения координат объектов которых можно вписать в прямоугольник
# эти координаты помогут нам разместьить мяч в нужном месте
ballrect = ball.get_rect()

# Начнем бесконечный цикл
while 1:
    # В данном контексте этот цикл можно назвать событийным
    # так как в нем будут фиксироваться и анализироваться события произошедшие
    # пока не закончилось выполнение этого цикла

    # Рассмотрим сначала события произошедшие в поле зрения бибдиотеки pygame
    # будим обрабатывать их так же в цикле так как за событий может произойти сколь угодно много то
    # это означает что функция которая предоставляет нам эти события будит делать это скорее всего в виде какого-то множества событий
    # в данном случае она возвращает нам лист событий
    for event in pygame.event.get():
        # нас интересует только одно событие из всего возможного мноржества
        # это событие выхода из программы которое происходит например
        # когда мы пытаемся завершить проиложение нажав на крест в заголовке окна
        # для этого проанализируем тип события
        if event.type == pygame.QUIT:
            # если тик события совпал с типом выхода то вызовим завершение программы
            sys.exit()

    # Время заняться перемещением нашего мяча
    # Передвиним прямоугольник в который у нас можно вписать мяч и который хранит координаты нашего мяча
    # в направлении скорости
    # по сути дела мы сдвигаем прямоугольник на какую-то величину по оси X и на каую-то по оси Y
    ballrect = ballrect.move(speed)

    # Теперь проанализируем ситуацию когда у нас мяч выходит за границы экрана
    # для этог нам необходимо посмотреть на то больше ли правая граница прямоугольника экрана ширины экрана
    # павая и левая границы
    if ballrect.left < 0 or ballrect.right > width:
        # меняем направление движения на противоположное изменив знак
        speed[0] = -speed[0]
    # для этог нам необходимо посмотреть на то больше ли нижняя граница прямоугольника экрана высоты экрана
    # Верхняя и нижняя
    if ballrect.top < 0 or ballrect.bottom > height:
        # меняем направление движения на противоположное изменив знак
        speed[1] = -speed[1]

    # Зполним весь экран нашего приложения черным цветом
    # Так как это будит выполняться на каждом шаге цикла то это будит также заливать черным и
    # нарисованый нами на предыдущем шаге мяч
    # это своего рода отчистка и каждый следующий шаг мы рисуем заново
    # А в следствии бытрого чередования кртинок на экране как в мультфильме мы видим движение
    screen.fill(black)

    # теперь нам нужно поместить мяч в положеное место
    # вызовим функцию копирования. она всталяет изображение в заданные кообдинаты
    # передаём координаты и изображение
    screen.blit(ball, ballrect)

    # теперь вызываем функцию которая выводит получившуюся картину в окно
    pygame.display.flip()

# В результате запуска мы увидим серию изображений котые для нас рисует программа
# Нами они будут восприниматься как последовательное движение мяча по экрану
# которое подчиняется определённым закономерностям
